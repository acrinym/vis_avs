use std::collections::HashMap;

use minifb::Key as MinifbKey;
use minifb::MouseButton as MinifbMouseButton;

#[derive(Eq, PartialEq, Hash)]
enum Key {
    MouseLeft,
    MouseRight,
    MouseMiddle,
    MouseX1,
    MouseX2,
    Backspace,
    Tab,
    Enter,
    Shift,
    Control,
    Alt,
    Super,
    Pause,
    CapsLock,
    Escape,
    Space,
    PageUp,
    PageDown,
    End,
    Home,
    Left,
    Up,
    Right,
    Down,
    Print,
    PrintScreen,
    Insert,
    Delete,
    Number(u8),
    Letter(char),
    Backquote,
    Minus,
    Equals,
    LeftBracket,
    RightBracket,
    Backslash,
    Semicolon,
    Apostrophe,
    Comma,
    Period,
    Slash,
    SuperLeft,
    SuperRight,
    Application,
    Sleep,
    NumNumber(u8),
    NumMultiply,
    NumAdd,
    NumSeparator,
    NumSubtract,
    NumDecimal,
    NumDivide,
    F(u8),
    Numlock,
    ScrollLock,
    ShiftLeft,
    ShiftRight,
    ControlLeft,
    ControlRight,
    AltLeft,
    AltRight,
    Menu,
    BrowserBack,
    BrowserForward,
    BrowserRefresh,
    VolumeMute,
    VolumeDown,
    VolumeUp,
    MediaNextTrack,
    MediaPrevTrack,
    MediaStop,
    MediaPlayPause,
    LaunchMail,
    LaunchApp1,
    LaunchApp2,
}

const MINIFB_TO_KEY: [(MinifbKey, (Key, Option<Key>)); 106] = [
    (MinifbKey::Key0, (Key::Number(0), None)),
    (MinifbKey::Key1, (Key::Number(1), None)),
    (MinifbKey::Key2, (Key::Number(2), None)),
    (MinifbKey::Key3, (Key::Number(3), None)),
    (MinifbKey::Key4, (Key::Number(4), None)),
    (MinifbKey::Key5, (Key::Number(5), None)),
    (MinifbKey::Key6, (Key::Number(6), None)),
    (MinifbKey::Key7, (Key::Number(7), None)),
    (MinifbKey::Key8, (Key::Number(8), None)),
    (MinifbKey::Key9, (Key::Number(9), None)),
    (MinifbKey::A, (Key::Letter('A'), None)),
    (MinifbKey::B, (Key::Letter('B'), None)),
    (MinifbKey::C, (Key::Letter('C'), None)),
    (MinifbKey::D, (Key::Letter('D'), None)),
    (MinifbKey::E, (Key::Letter('E'), None)),
    (MinifbKey::F, (Key::Letter('F'), None)),
    (MinifbKey::G, (Key::Letter('G'), None)),
    (MinifbKey::H, (Key::Letter('H'), None)),
    (MinifbKey::I, (Key::Letter('I'), None)),
    (MinifbKey::J, (Key::Letter('J'), None)),
    (MinifbKey::K, (Key::Letter('K'), None)),
    (MinifbKey::L, (Key::Letter('L'), None)),
    (MinifbKey::M, (Key::Letter('M'), None)),
    (MinifbKey::N, (Key::Letter('N'), None)),
    (MinifbKey::O, (Key::Letter('O'), None)),
    (MinifbKey::P, (Key::Letter('P'), None)),
    (MinifbKey::Q, (Key::Letter('Q'), None)),
    (MinifbKey::R, (Key::Letter('R'), None)),
    (MinifbKey::S, (Key::Letter('S'), None)),
    (MinifbKey::T, (Key::Letter('T'), None)),
    (MinifbKey::U, (Key::Letter('U'), None)),
    (MinifbKey::V, (Key::Letter('V'), None)),
    (MinifbKey::W, (Key::Letter('W'), None)),
    (MinifbKey::X, (Key::Letter('X'), None)),
    (MinifbKey::Y, (Key::Letter('Y'), None)),
    (MinifbKey::Z, (Key::Letter('Z'), None)),
    (MinifbKey::F1, (Key::F(1), None)),
    (MinifbKey::F2, (Key::F(2), None)),
    (MinifbKey::F3, (Key::F(3), None)),
    (MinifbKey::F4, (Key::F(4), None)),
    (MinifbKey::F5, (Key::F(5), None)),
    (MinifbKey::F6, (Key::F(6), None)),
    (MinifbKey::F7, (Key::F(7), None)),
    (MinifbKey::F8, (Key::F(8), None)),
    (MinifbKey::F9, (Key::F(9), None)),
    (MinifbKey::F10, (Key::F(10), None)),
    (MinifbKey::F11, (Key::F(11), None)),
    (MinifbKey::F12, (Key::F(12), None)),
    (MinifbKey::F13, (Key::F(13), None)),
    (MinifbKey::F14, (Key::F(14), None)),
    (MinifbKey::F15, (Key::F(15), None)),
    (MinifbKey::Down, (Key::Down, None)),
    (MinifbKey::Left, (Key::Left, None)),
    (MinifbKey::Right, (Key::Right, None)),
    (MinifbKey::Up, (Key::Up, None)),
    (MinifbKey::Apostrophe, (Key::Apostrophe, None)),
    (MinifbKey::Backquote, (Key::Backquote, None)),
    (MinifbKey::Backslash, (Key::Backslash, None)),
    (MinifbKey::Comma, (Key::Comma, None)),
    (MinifbKey::Equal, (Key::Equals, None)),
    (MinifbKey::LeftBracket, (Key::LeftBracket, None)),
    (MinifbKey::Minus, (Key::Minus, None)),
    (MinifbKey::Period, (Key::Period, None)),
    (MinifbKey::RightBracket, (Key::RightBracket, None)),
    (MinifbKey::Semicolon, (Key::Semicolon, None)),
    (MinifbKey::Slash, (Key::Slash, None)),
    (MinifbKey::Backspace, (Key::Backspace, None)),
    (MinifbKey::Delete, (Key::Delete, None)),
    (MinifbKey::End, (Key::End, None)),
    (MinifbKey::Enter, (Key::Enter, None)),
    (MinifbKey::Escape, (Key::Escape, None)),
    (MinifbKey::Home, (Key::Home, None)),
    (MinifbKey::Insert, (Key::Insert, None)),
    (MinifbKey::Menu, (Key::Menu, None)),
    (MinifbKey::PageDown, (Key::PageDown, None)),
    (MinifbKey::PageUp, (Key::PageUp, None)),
    (MinifbKey::Pause, (Key::Pause, None)),
    (MinifbKey::Space, (Key::Space, None)),
    (MinifbKey::Tab, (Key::Tab, None)),
    (MinifbKey::NumLock, (Key::Numlock, None)),
    (MinifbKey::CapsLock, (Key::CapsLock, None)),
    (MinifbKey::ScrollLock, (Key::ScrollLock, None)),
    (MinifbKey::LeftShift, (Key::ShiftLeft, Some(Key::Shift))),
    (MinifbKey::RightShift, (Key::ShiftRight, Some(Key::Shift))),
    (MinifbKey::LeftCtrl, (Key::ControlLeft, Some(Key::Control))),
    (
        MinifbKey::RightCtrl,
        (Key::ControlRight, Some(Key::Control)),
    ),
    (MinifbKey::NumPad0, (Key::NumNumber(0), None)),
    (MinifbKey::NumPad1, (Key::NumNumber(1), None)),
    (MinifbKey::NumPad2, (Key::NumNumber(2), None)),
    (MinifbKey::NumPad3, (Key::NumNumber(3), None)),
    (MinifbKey::NumPad4, (Key::NumNumber(4), None)),
    (MinifbKey::NumPad5, (Key::NumNumber(5), None)),
    (MinifbKey::NumPad6, (Key::NumNumber(6), None)),
    (MinifbKey::NumPad7, (Key::NumNumber(7), None)),
    (MinifbKey::NumPad8, (Key::NumNumber(8), None)),
    (MinifbKey::NumPad9, (Key::NumNumber(9), None)),
    (MinifbKey::NumPadDot, (Key::NumDecimal, None)),
    (MinifbKey::NumPadSlash, (Key::NumDivide, None)),
    (MinifbKey::NumPadAsterisk, (Key::NumMultiply, None)),
    (MinifbKey::NumPadMinus, (Key::NumSubtract, None)),
    (MinifbKey::NumPadPlus, (Key::NumAdd, None)),
    (MinifbKey::NumPadEnter, (Key::Enter, None)),
    (MinifbKey::LeftAlt, (Key::AltLeft, Some(Key::Alt))),
    (MinifbKey::RightAlt, (Key::AltRight, Some(Key::Alt))),
    (MinifbKey::LeftSuper, (Key::SuperLeft, Some(Key::Super))),
    (MinifbKey::RightSuper, (Key::SuperRight, Some(Key::Super))),
    // MinifbKey::Unknown not mapped
    // MinifbKey::Count not mapped
];

const KEY_TO_MS_VKEY: [(Key, u8); 126] = [
    (Key::MouseLeft, 0x01),
    (Key::MouseRight, 0x02),
    (Key::MouseMiddle, 0x04),
    (Key::MouseX1, 0x05),
    (Key::MouseX2, 0x06),
    (Key::Backspace, 0x08),
    (Key::Tab, 0x09),
    (Key::Enter, 0x0D),
    (Key::Shift, 0x10),
    (Key::Control, 0x11),
    (Key::Alt, 0x12),
    (Key::Pause, 0x13),
    (Key::CapsLock, 0x14),
    (Key::Escape, 0x1B),
    (Key::Space, 0x20),
    (Key::PageUp, 0x21),
    (Key::PageDown, 0x22),
    (Key::End, 0x23),
    (Key::Home, 0x24),
    (Key::Left, 0x25),
    (Key::Up, 0x26),
    (Key::Right, 0x27),
    (Key::Down, 0x28),
    (Key::Print, 0x2A),
    (Key::PrintScreen, 0x2C),
    (Key::Insert, 0x2D),
    (Key::Delete, 0x2E),
    (Key::Number(0), 0x30),
    (Key::Number(1), 0x31),
    (Key::Number(2), 0x32),
    (Key::Number(3), 0x33),
    (Key::Number(4), 0x34),
    (Key::Number(5), 0x35),
    (Key::Number(6), 0x36),
    (Key::Number(7), 0x37),
    (Key::Number(8), 0x38),
    (Key::Number(9), 0x39),
    (Key::Letter('A'), 0x41),
    (Key::Letter('B'), 0x42),
    (Key::Letter('C'), 0x43),
    (Key::Letter('D'), 0x44),
    (Key::Letter('E'), 0x45),
    (Key::Letter('F'), 0x46),
    (Key::Letter('G'), 0x47),
    (Key::Letter('H'), 0x48),
    (Key::Letter('I'), 0x49),
    (Key::Letter('J'), 0x4A),
    (Key::Letter('K'), 0x4B),
    (Key::Letter('L'), 0x4C),
    (Key::Letter('M'), 0x4D),
    (Key::Letter('N'), 0x4E),
    (Key::Letter('O'), 0x4F),
    (Key::Letter('P'), 0x50),
    (Key::Letter('Q'), 0x51),
    (Key::Letter('R'), 0x52),
    (Key::Letter('S'), 0x53),
    (Key::Letter('T'), 0x54),
    (Key::Letter('U'), 0x55),
    (Key::Letter('V'), 0x56),
    (Key::Letter('W'), 0x57),
    (Key::Letter('X'), 0x58),
    (Key::Letter('Y'), 0x59),
    (Key::Letter('Z'), 0x5A),
    (Key::SuperLeft, 0x5B),
    (Key::SuperRight, 0x5C),
    (Key::Application, 0x5D),
    (Key::Sleep, 0x5F),
    (Key::NumNumber(0), 0x60),
    (Key::NumNumber(1), 0x61),
    (Key::NumNumber(2), 0x62),
    (Key::NumNumber(3), 0x63),
    (Key::NumNumber(4), 0x64),
    (Key::NumNumber(5), 0x65),
    (Key::NumNumber(6), 0x66),
    (Key::NumNumber(7), 0x67),
    (Key::NumNumber(8), 0x68),
    (Key::NumNumber(9), 0x69),
    (Key::NumMultiply, 0x6A),
    (Key::NumAdd, 0x6B),
    (Key::NumSeparator, 0x6C),
    (Key::NumSubtract, 0x6D),
    (Key::NumDecimal, 0x6E),
    (Key::NumDivide, 0x6F),
    (Key::F(1), 0x70),
    (Key::F(2), 0x71),
    (Key::F(3), 0x72),
    (Key::F(4), 0x73),
    (Key::F(5), 0x74),
    (Key::F(6), 0x75),
    (Key::F(7), 0x76),
    (Key::F(8), 0x77),
    (Key::F(9), 0x78),
    (Key::F(10), 0x79),
    (Key::F(11), 0x7A),
    (Key::F(12), 0x7B),
    (Key::F(13), 0x7C),
    (Key::F(14), 0x7D),
    (Key::F(15), 0x7E),
    (Key::F(16), 0x7F),
    (Key::F(17), 0x80),
    (Key::F(18), 0x81),
    (Key::F(19), 0x82),
    (Key::F(20), 0x83),
    (Key::F(21), 0x84),
    (Key::F(22), 0x85),
    (Key::F(23), 0x86),
    (Key::F(24), 0x87),
    (Key::ShiftLeft, 0xA0),
    (Key::ShiftRight, 0xA1),
    (Key::ControlLeft, 0xA2),
    (Key::ControlRight, 0xA3),
    (Key::AltLeft, 0xA4),
    (Key::AltRight, 0xA5),
    (Key::BrowserBack, 0xA6),
    (Key::BrowserForward, 0xA7),
    (Key::BrowserRefresh, 0xA8),
    (Key::VolumeMute, 0xAD),
    (Key::VolumeDown, 0xAE),
    (Key::VolumeUp, 0xAF),
    (Key::MediaNextTrack, 0xB0),
    (Key::MediaPrevTrack, 0xB1),
    (Key::MediaStop, 0xB2),
    (Key::MediaPlayPause, 0xB3),
    (Key::LaunchMail, 0xB4),
    (Key::LaunchApp1, 0xB6),
    (Key::LaunchApp2, 0xB7),
];

pub struct AvsKeyboardMap {
    key_to_ms_vkey: HashMap<Key, u8>,
    minifb_to_key: HashMap<MinifbKey, (Key, Option<Key>)>,
}

impl AvsKeyboardMap {
    pub fn new() -> Self {
        Self {
            key_to_ms_vkey: HashMap::from(KEY_TO_MS_VKEY),
            minifb_to_key: HashMap::from(MINIFB_TO_KEY),
        }
    }

    pub fn from_minifb(&self, key: MinifbKey) -> Vec<u8> {
        let mut result: Vec<u8> = vec![];
        match self.minifb_to_key.get(&key) {
            Some((specific, Some(generic))) => {
                if let Some(vkey) = self.key_to_ms_vkey.get(specific) {
                    result.push(*vkey);
                }
                if let Some(vkey) = self.key_to_ms_vkey.get(generic) {
                    result.push(*vkey);
                }
            }
            Some((key, None)) => {
                if let Some(vkey) = self.key_to_ms_vkey.get(key) {
                    result.push(*vkey);
                }
            }
            None => (),
        }
        result
    }
}
